{"ast":null,"code":"import _classCallCheck from \"F:/web/biblioteca/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"F:/web/biblioteca/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/conta.service\";\nexport var AutenticacaoInterceptor = /*#__PURE__*/(function () {\n  var _AutenticacaoInterceptor;\n  var AutenticacaoInterceptor = /*#__PURE__*/function () {\n    function AutenticacaoInterceptor(contaService) {\n      _classCallCheck(this, AutenticacaoInterceptor);\n      this.contaService = contaService;\n    }\n    return _createClass(AutenticacaoInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(req, next) {\n        var token = this.contaService.getAuthorizationToken();\n        var request = req;\n        if (token && !this.contaService.isTokenExpired(token)) {\n          // O request é imutavel, ou seja, não é possível mudar nada\n          // Faço o clone para conseguir mudar as propriedades\n          // Passo o token de autenticação no header\n          request = req.clone({\n            headers: req.headers.set('Authorization', \"Bearer \".concat(token))\n          });\n        }\n        // retorno o request com o erro tratado\n        return next.handle(request).pipe(catchError(this.handleError));\n      }\n    }, {\n      key: \"handleError\",\n      value: function handleError(error) {\n        if (error.error instanceof ErrorEvent) {\n          // Erro de client-side ou de rede\n          console.error('Ocorreu um erro:', error.error.message);\n        } else {\n          // Erro retornando pelo backend\n          console.error(\"C\\xF3digo do erro \".concat(error.status, \", \") + \"Erro: \".concat(JSON.stringify(error.error)));\n        }\n        // retornar um observable com uma mensagem amigavel.\n        return throwError('Ocorreu um erro, tente novamente');\n      }\n    }]);\n  }();\n  _AutenticacaoInterceptor = AutenticacaoInterceptor;\n  _AutenticacaoInterceptor.ɵfac = function AutenticacaoInterceptor_Factory(t) {\n    return new (t || _AutenticacaoInterceptor)(i0.ɵɵinject(i1.ContaService));\n  };\n  _AutenticacaoInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _AutenticacaoInterceptor,\n    factory: _AutenticacaoInterceptor.ɵfac\n  });\n  return AutenticacaoInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}