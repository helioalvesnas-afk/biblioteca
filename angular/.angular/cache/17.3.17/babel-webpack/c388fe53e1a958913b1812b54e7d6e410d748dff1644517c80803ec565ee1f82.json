{"ast":null,"code":"import _defineProperty from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectWithoutProperties from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _createForOfIteratorHelper from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _callSuper from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _toConsumableArray from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _readOnlyError from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/readOnlyError.js\";\nimport _slicedToArray from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"F:/biblioteca/angular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nvar _excluded = [\"isCacheActive\"];\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, _regeneratorDefine2(e, r, n, t); }\n/**\n * @license Angular v17.3.12\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, NgZone, runInInjectionContext, InjectionToken, ɵPendingTasks, PLATFORM_ID, ɵConsole, ɵformatRuntimeError, Inject, ɵRuntimeError, makeEnvironmentProviders, NgModule, TransferState, makeStateKey, ɵperformanceMarkFeature, APP_BOOTSTRAP_LISTENER, ApplicationRef, ɵwhenStable, ɵtruncateMiddle } from '@angular/core';\nimport { of, Observable, from } from 'rxjs';\nimport { concatMap, filter, map, finalize, switchMap, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { isPlatformServer, DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nvar HttpHandler = /*#__PURE__*/_createClass(function HttpHandler() {\n  _classCallCheck(this, HttpHandler);\n});\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nvar HttpBackend = /*#__PURE__*/_createClass(function HttpBackend() {\n  _classCallCheck(this, HttpBackend);\n});\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nvar HttpHeaders = /*#__PURE__*/function () {\n  /**  Constructs a new HTTP header object with the given values.*/\n  function HttpHeaders(headers) {\n    var _this = this;\n    _classCallCheck(this, HttpHeaders);\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    this.normalizedNames = new Map();\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n    this.lazyUpdate = null;\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = function () {\n        _this.headers = new Map();\n        headers.split('\\n').forEach(function (line) {\n          var index = line.indexOf(':');\n          if (index > 0) {\n            var name = line.slice(0, index);\n            var key = name.toLowerCase();\n            var value = line.slice(index + 1).trim();\n            _this.maybeSetNormalizedName(name, key);\n            if (_this.headers.has(key)) {\n              _this.headers.get(key).push(value);\n            } else {\n              _this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n      this.headers = new Map();\n      headers.forEach(function (values, name) {\n        _this.setHeaderEntries(name, values);\n      });\n    } else {\n      this.lazyInit = function () {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        _this.headers = new Map();\n        Object.entries(headers).forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            name = _ref2[0],\n            values = _ref2[1];\n          _this.setHeaderEntries(name, values);\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  return _createClass(HttpHeaders, [{\n    key: \"has\",\n    value: function has(name) {\n      this.init();\n      return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      this.init();\n      var values = this.headers.get(name.toLowerCase());\n      return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      this.init();\n      return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n  }, {\n    key: \"append\",\n    value: function append(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'd'\n      });\n    }\n  }, {\n    key: \"maybeSetNormalizedName\",\n    value: function maybeSetNormalizedName(name, lcName) {\n      if (!this.normalizedNames.has(lcName)) {\n        this.normalizedNames.set(lcName, name);\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n      if (!!this.lazyInit) {\n        if (this.lazyInit instanceof HttpHeaders) {\n          this.copyFrom(this.lazyInit);\n        } else {\n          this.lazyInit();\n        }\n        this.lazyInit = null;\n        if (!!this.lazyUpdate) {\n          this.lazyUpdate.forEach(function (update) {\n            return _this2.applyUpdate(update);\n          });\n          this.lazyUpdate = null;\n        }\n      }\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(other) {\n      var _this3 = this;\n      other.init();\n      Array.from(other.headers.keys()).forEach(function (key) {\n        _this3.headers.set(key, other.headers.get(key));\n        _this3.normalizedNames.set(key, other.normalizedNames.get(key));\n      });\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpHeaders();\n      clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n      clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n      return clone;\n    }\n  }, {\n    key: \"applyUpdate\",\n    value: function applyUpdate(update) {\n      var key = update.name.toLowerCase();\n      switch (update.op) {\n        case 'a':\n        case 's':\n          var value = update.value;\n          if (typeof value === 'string') {\n            value = [value];\n          }\n          if (value.length === 0) {\n            return;\n          }\n          this.maybeSetNormalizedName(update.name, key);\n          var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n          base.push.apply(base, _toConsumableArray(value));\n          this.headers.set(key, base);\n          break;\n        case 'd':\n          var toDelete = update.value;\n          if (!toDelete) {\n            this.headers[\"delete\"](key);\n            this.normalizedNames[\"delete\"](key);\n          } else {\n            var existing = this.headers.get(key);\n            if (!existing) {\n              return;\n            }\n            existing = existing.filter(function (value) {\n              return toDelete.indexOf(value) === -1;\n            });\n            if (existing.length === 0) {\n              this.headers[\"delete\"](key);\n              this.normalizedNames[\"delete\"](key);\n            } else {\n              this.headers.set(key, existing);\n            }\n          }\n          break;\n      }\n    }\n  }, {\n    key: \"setHeaderEntries\",\n    value: function setHeaderEntries(name, values) {\n      var headerValues = (Array.isArray(values) ? values : [values]).map(function (value) {\n        return value.toString();\n      });\n      var key = name.toLowerCase();\n      this.headers.set(key, headerValues);\n      this.maybeSetNormalizedName(name, key);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this4 = this;\n      this.init();\n      Array.from(this.normalizedNames.keys()).forEach(function (key) {\n        return fn(_this4.normalizedNames.get(key), _this4.headers.get(key));\n      });\n    }\n  }]);\n}();\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n  for (var _i = 0, _Object$entries = Object.entries(headers); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      value = _Object$entries$_i[1];\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(\"Unexpected value of the `\".concat(key, \"` header provided. \") + \"Expecting either a string, a number or an array, but got: `\".concat(value, \"`.\"));\n    }\n  }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nvar HttpUrlEncodingCodec = /*#__PURE__*/function () {\n  function HttpUrlEncodingCodec() {\n    _classCallCheck(this, HttpUrlEncodingCodec);\n  }\n  return _createClass(HttpUrlEncodingCodec, [{\n    key: \"encodeKey\",\n    value:\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    function encodeKey(key) {\n      return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n  }, {\n    key: \"encodeValue\",\n    value: function encodeValue(value) {\n      return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n  }, {\n    key: \"decodeKey\",\n    value: function decodeKey(key) {\n      return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n  }, {\n    key: \"decodeValue\",\n    value: function decodeValue(value) {\n      return decodeURIComponent(value);\n    }\n  }]);\n}();\nfunction paramParser(rawParams, codec) {\n  var map = new Map();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    var params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(function (param) {\n      var eqIdx = param.indexOf('=');\n      var _ref3 = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))],\n        _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        val = _ref4[1];\n      var list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nvar STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nvar STANDARD_ENCODING_REPLACEMENTS = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/'\n};\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, function (s, t) {\n    var _STANDARD_ENCODING_RE;\n    return (_STANDARD_ENCODING_RE = STANDARD_ENCODING_REPLACEMENTS[t]) !== null && _STANDARD_ENCODING_RE !== void 0 ? _STANDARD_ENCODING_RE : s;\n  });\n}\nfunction valueToString(value) {\n  return \"\".concat(value);\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nvar HttpParams = /*#__PURE__*/function () {\n  function HttpParams() {\n    var _this5 = this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, HttpParams);\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(\"Cannot specify both fromString and fromObject.\");\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(function (key) {\n        var value = options.fromObject[key];\n        // convert the values to strings\n        var values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        _this5.map.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  return _createClass(HttpParams, [{\n    key: \"has\",\n    value: function has(param) {\n      this.init();\n      return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n  }, {\n    key: \"get\",\n    value: function get(param) {\n      this.init();\n      var res = this.map.get(param);\n      return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n  }, {\n    key: \"getAll\",\n    value: function getAll(param) {\n      this.init();\n      return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n  }, {\n    key: \"append\",\n    value: function append(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n  }, {\n    key: \"appendAll\",\n    value: function appendAll(params) {\n      var updates = [];\n      Object.keys(params).forEach(function (param) {\n        var value = params[param];\n        if (Array.isArray(value)) {\n          value.forEach(function (_value) {\n            updates.push({\n              param: param,\n              value: _value,\n              op: 'a'\n            });\n          });\n        } else {\n          updates.push({\n            param: param,\n            value: value,\n            op: 'a'\n          });\n        }\n      });\n      return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n  }, {\n    key: \"set\",\n    value: function set(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'd'\n      });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this6 = this;\n      this.init();\n      return this.keys().map(function (key) {\n        var eKey = _this6.encoder.encodeKey(key);\n        // `a: ['1']` produces `'a=1'`\n        // `b: []` produces `''`\n        // `c: ['1', '2']` produces `'c=1&c=2'`\n        return _this6.map.get(key).map(function (value) {\n          return eKey + '=' + _this6.encoder.encodeValue(value);\n        }).join('&');\n      })\n      // filter out empty values because `b: []` produces `''`\n      // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n      .filter(function (param) {\n        return param !== '';\n      }).join('&');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpParams({\n        encoder: this.encoder\n      });\n      clone.cloneFrom = this.cloneFrom || this;\n      clone.updates = (this.updates || []).concat(update);\n      return clone;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this7 = this;\n      if (this.map === null) {\n        this.map = new Map();\n      }\n      if (this.cloneFrom !== null) {\n        this.cloneFrom.init();\n        this.cloneFrom.keys().forEach(function (key) {\n          return _this7.map.set(key, _this7.cloneFrom.map.get(key));\n        });\n        this.updates.forEach(function (update) {\n          switch (update.op) {\n            case 'a':\n            case 's':\n              var base = (update.op === 'a' ? _this7.map.get(update.param) : undefined) || [];\n              base.push(valueToString(update.value));\n              _this7.map.set(update.param, base);\n              break;\n            case 'd':\n              if (update.value !== undefined) {\n                var _base = _this7.map.get(update.param) || [];\n                var idx = _base.indexOf(valueToString(update.value));\n                if (idx !== -1) {\n                  _base.splice(idx, 1);\n                }\n                if (_base.length > 0) {\n                  _this7.map.set(update.param, _base);\n                } else {\n                  _this7.map[\"delete\"](update.param);\n                }\n              } else {\n                _this7.map[\"delete\"](update.param);\n                break;\n              }\n          }\n        });\n        this.cloneFrom = this.updates = null;\n      }\n    }\n  }]);\n}();\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nvar HttpContextToken = /*#__PURE__*/_createClass(function HttpContextToken(defaultValue) {\n  _classCallCheck(this, HttpContextToken);\n  this.defaultValue = defaultValue;\n});\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nvar HttpContext = /*#__PURE__*/function () {\n  function HttpContext() {\n    _classCallCheck(this, HttpContext);\n    this.map = new Map();\n  }\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  return _createClass(HttpContext, [{\n    key: \"set\",\n    value: function set(token, value) {\n      this.map.set(token, value);\n      return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n  }, {\n    key: \"get\",\n    value: function get(token) {\n      if (!this.map.has(token)) {\n        this.map.set(token, token.defaultValue());\n      }\n      return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(token) {\n      this.map[\"delete\"](token);\n      return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n  }, {\n    key: \"has\",\n    value: function has(token) {\n      return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this.map.keys();\n    }\n  }]);\n}();\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nvar HttpRequest = /*#__PURE__*/function () {\n  function HttpRequest(method, url, third, fourth) {\n    var _this$headers, _this$context;\n    _classCallCheck(this, HttpRequest);\n    this.url = url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n    this.body = null;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     *\n     * Note: The `FetchBackend` doesn't support progress report on uploads.\n     */\n    this.reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n    this.withCredentials = false;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n    this.responseType = 'json';\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    var options;\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    }\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n      if (!!options.context) {\n        this.context = options.context;\n      }\n      if (!!options.params) {\n        this.params = options.params;\n      }\n      // We do want to assign transferCache even if it's falsy (false is valid value)\n      this.transferCache = options.transferCache;\n    }\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    (_this$headers = this.headers) !== null && _this$headers !== void 0 ? _this$headers : this.headers = new HttpHeaders();\n    // If no context have been passed in, construct a new HttpContext instance.\n    (_this$context = this.context) !== null && _this$context !== void 0 ? _this$context : this.context = new HttpContext();\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      var params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        var qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        var sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  return _createClass(HttpRequest, [{\n    key: \"serializeBody\",\n    value: function serializeBody() {\n      // If no body is present, no need to serialize it.\n      if (this.body === null) {\n        return null;\n      }\n      // Check whether the body is already in a serialized form. If so,\n      // it can just be returned directly.\n      if (typeof this.body === 'string' || isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body)) {\n        return this.body;\n      }\n      // Check whether the body is an instance of HttpUrlEncodedParams.\n      if (this.body instanceof HttpParams) {\n        return this.body.toString();\n      }\n      // Check whether the body is an object or array, and serialize with JSON if so.\n      if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n        return JSON.stringify(this.body);\n      }\n      // Fall back on toString() for everything else.\n      return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n  }, {\n    key: \"detectContentTypeHeader\",\n    value: function detectContentTypeHeader() {\n      // An empty body has no content type.\n      if (this.body === null) {\n        return null;\n      }\n      // FormData bodies rely on the browser's content type assignment.\n      if (isFormData(this.body)) {\n        return null;\n      }\n      // Blobs usually have their own content type. If it doesn't, then\n      // no type can be inferred.\n      if (isBlob(this.body)) {\n        return this.body.type || null;\n      }\n      // Array buffers have unknown contents and thus no type can be inferred.\n      if (isArrayBuffer(this.body)) {\n        return null;\n      }\n      // Technically, strings could be a form of JSON data, but it's safe enough\n      // to assume they're plain strings.\n      if (typeof this.body === 'string') {\n        return 'text/plain';\n      }\n      // `HttpUrlEncodedParams` has its own content-type.\n      if (this.body instanceof HttpParams) {\n        return 'application/x-www-form-urlencoded;charset=UTF-8';\n      }\n      // Arrays, objects, boolean and numbers will be encoded as JSON.\n      if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n        return 'application/json';\n      }\n      // No type could be inferred.\n      return null;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var _update$transferCache, _update$withCredentia, _update$reportProgres, _update$context;\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // For method, url, and responseType, take the current value unless\n      // it is overridden in the update hash.\n      var method = update.method || this.method;\n      var url = update.url || this.url;\n      var responseType = update.responseType || this.responseType;\n      // Carefully handle the transferCache to differentiate between\n      // `false` and `undefined` in the update args.\n      var transferCache = (_update$transferCache = update.transferCache) !== null && _update$transferCache !== void 0 ? _update$transferCache : this.transferCache;\n      // The body is somewhat special - a `null` value in update.body means\n      // whatever current body is present is being overridden with an empty\n      // body, whereas an `undefined` value in update.body implies no\n      // override.\n      var body = update.body !== undefined ? update.body : this.body;\n      // Carefully handle the boolean options to differentiate between\n      // `false` and `undefined` in the update args.\n      var withCredentials = (_update$withCredentia = update.withCredentials) !== null && _update$withCredentia !== void 0 ? _update$withCredentia : this.withCredentials;\n      var reportProgress = (_update$reportProgres = update.reportProgress) !== null && _update$reportProgres !== void 0 ? _update$reportProgres : this.reportProgress;\n      // Headers and params may be appended to if `setHeaders` or\n      // `setParams` are used.\n      var headers = update.headers || this.headers;\n      var params = update.params || this.params;\n      // Pass on context if needed\n      var context = (_update$context = update.context) !== null && _update$context !== void 0 ? _update$context : this.context;\n      // Check whether the caller has asked to add headers.\n      if (update.setHeaders !== undefined) {\n        // Set every requested header.\n        headers = Object.keys(update.setHeaders).reduce(function (headers, name) {\n          return headers.set(name, update.setHeaders[name]);\n        }, headers);\n      }\n      // Check whether the caller has asked to set params.\n      if (update.setParams) {\n        // Set every requested param.\n        params = Object.keys(update.setParams).reduce(function (params, param) {\n          return params.set(param, update.setParams[param]);\n        }, params);\n      }\n      // Finally, construct the new HttpRequest using the pieces from above.\n      return new HttpRequest(method, url, body, {\n        params: params,\n        headers: headers,\n        context: context,\n        reportProgress: reportProgress,\n        responseType: responseType,\n        withCredentials: withCredentials,\n        transferCache: transferCache\n      });\n    }\n  }]);\n}();\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType = /*#__PURE__*/function (HttpEventType) {\n  /**\n   * The request was sent out over the wire.\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\n   * An upload progress event was received.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\n   * The response status code and headers were received.\n   */\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\n   * A download progress event was received.\n   */\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\n   * The full response including the body was received.\n   */\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n  return HttpEventType;\n}(HttpEventType || {});\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nvar HttpResponseBase = /*#__PURE__*/_createClass(\n/**\n * Super-constructor for all responses.\n *\n * The single parameter accepted is an initialization hash. Any properties\n * of the response passed there will override the default values.\n */\nfunction HttpResponseBase(init) {\n  var defaultStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : HttpStatusCode.Ok;\n  var defaultStatusText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'OK';\n  _classCallCheck(this, HttpResponseBase);\n  // If the hash has values passed, use them to initialize the response.\n  // Otherwise use the default values.\n  this.headers = init.headers || new HttpHeaders();\n  this.status = init.status !== undefined ? init.status : defaultStatus;\n  this.statusText = init.statusText || defaultStatusText;\n  this.url = init.url || null;\n  // Cache the ok value to avoid defining a getter.\n  this.ok = this.status >= 200 && this.status < 300;\n});\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nvar HttpHeaderResponse = /*#__PURE__*/function (_HttpResponseBase) {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  function HttpHeaderResponse() {\n    var _this8;\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, HttpHeaderResponse);\n    _this8 = _callSuper(this, HttpHeaderResponse, [init]);\n    _this8.type = HttpEventType.ResponseHeader;\n    return _this8;\n  }\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  _inherits(HttpHeaderResponse, _HttpResponseBase);\n  return _createClass(HttpHeaderResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // Perform a straightforward initialization of the new HttpHeaderResponse,\n      // overriding the current parameters with new ones if given.\n      return new HttpHeaderResponse({\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n}(HttpResponseBase);\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nvar HttpResponse = /*#__PURE__*/function (_HttpResponseBase2) {\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  function HttpResponse() {\n    var _this9;\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, HttpResponse);\n    _this9 = _callSuper(this, HttpResponse, [init]);\n    _this9.type = HttpEventType.Response;\n    _this9.body = init.body !== undefined ? init.body : null;\n    return _this9;\n  }\n  _inherits(HttpResponse, _HttpResponseBase2);\n  return _createClass(HttpResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new HttpResponse({\n        body: update.body !== undefined ? update.body : this.body,\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n}(HttpResponseBase);\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nvar HttpErrorResponse = /*#__PURE__*/function (_HttpResponseBase3) {\n  function HttpErrorResponse(init) {\n    var _this0;\n    _classCallCheck(this, HttpErrorResponse);\n    // Initialize with a default status of 0 / Unknown Error.\n    _this0 = _callSuper(this, HttpErrorResponse, [init, 0, 'Unknown Error']);\n    _this0.name = 'HttpErrorResponse';\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n    _this0.ok = false;\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (_this0.status >= 200 && _this0.status < 300) {\n      _this0.message = \"Http failure during parsing for \".concat(init.url || '(unknown url)');\n    } else {\n      _this0.message = \"Http failure response for \".concat(init.url || '(unknown url)', \": \").concat(init.status, \" \").concat(init.statusText);\n    }\n    _this0.error = init.error || null;\n    return _this0;\n  }\n  _inherits(HttpErrorResponse, _HttpResponseBase3);\n  return _createClass(HttpErrorResponse);\n}(HttpResponseBase);\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nvar HttpStatusCode = /*#__PURE__*/function (HttpStatusCode) {\n  HttpStatusCode[HttpStatusCode[\"Continue\"] = 100] = \"Continue\";\n  HttpStatusCode[HttpStatusCode[\"SwitchingProtocols\"] = 101] = \"SwitchingProtocols\";\n  HttpStatusCode[HttpStatusCode[\"Processing\"] = 102] = \"Processing\";\n  HttpStatusCode[HttpStatusCode[\"EarlyHints\"] = 103] = \"EarlyHints\";\n  HttpStatusCode[HttpStatusCode[\"Ok\"] = 200] = \"Ok\";\n  HttpStatusCode[HttpStatusCode[\"Created\"] = 201] = \"Created\";\n  HttpStatusCode[HttpStatusCode[\"Accepted\"] = 202] = \"Accepted\";\n  HttpStatusCode[HttpStatusCode[\"NonAuthoritativeInformation\"] = 203] = \"NonAuthoritativeInformation\";\n  HttpStatusCode[HttpStatusCode[\"NoContent\"] = 204] = \"NoContent\";\n  HttpStatusCode[HttpStatusCode[\"ResetContent\"] = 205] = \"ResetContent\";\n  HttpStatusCode[HttpStatusCode[\"PartialContent\"] = 206] = \"PartialContent\";\n  HttpStatusCode[HttpStatusCode[\"MultiStatus\"] = 207] = \"MultiStatus\";\n  HttpStatusCode[HttpStatusCode[\"AlreadyReported\"] = 208] = \"AlreadyReported\";\n  HttpStatusCode[HttpStatusCode[\"ImUsed\"] = 226] = \"ImUsed\";\n  HttpStatusCode[HttpStatusCode[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n  HttpStatusCode[HttpStatusCode[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n  HttpStatusCode[HttpStatusCode[\"Found\"] = 302] = \"Found\";\n  HttpStatusCode[HttpStatusCode[\"SeeOther\"] = 303] = \"SeeOther\";\n  HttpStatusCode[HttpStatusCode[\"NotModified\"] = 304] = \"NotModified\";\n  HttpStatusCode[HttpStatusCode[\"UseProxy\"] = 305] = \"UseProxy\";\n  HttpStatusCode[HttpStatusCode[\"Unused\"] = 306] = \"Unused\";\n  HttpStatusCode[HttpStatusCode[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n  HttpStatusCode[HttpStatusCode[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n  HttpStatusCode[HttpStatusCode[\"BadRequest\"] = 400] = \"BadRequest\";\n  HttpStatusCode[HttpStatusCode[\"Unauthorized\"] = 401] = \"Unauthorized\";\n  HttpStatusCode[HttpStatusCode[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n  HttpStatusCode[HttpStatusCode[\"Forbidden\"] = 403] = \"Forbidden\";\n  HttpStatusCode[HttpStatusCode[\"NotFound\"] = 404] = \"NotFound\";\n  HttpStatusCode[HttpStatusCode[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n  HttpStatusCode[HttpStatusCode[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n  HttpStatusCode[HttpStatusCode[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n  HttpStatusCode[HttpStatusCode[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n  HttpStatusCode[HttpStatusCode[\"Conflict\"] = 409] = \"Conflict\";\n  HttpStatusCode[HttpStatusCode[\"Gone\"] = 410] = \"Gone\";\n  HttpStatusCode[HttpStatusCode[\"LengthRequired\"] = 411] = \"LengthRequired\";\n  HttpStatusCode[HttpStatusCode[\"PreconditionFailed\"] = 412] = \"PreconditionFailed\";\n  HttpStatusCode[HttpStatusCode[\"PayloadTooLarge\"] = 413] = \"PayloadTooLarge\";\n  HttpStatusCode[HttpStatusCode[\"UriTooLong\"] = 414] = \"UriTooLong\";\n  HttpStatusCode[HttpStatusCode[\"UnsupportedMediaType\"] = 415] = \"UnsupportedMediaType\";\n  HttpStatusCode[HttpStatusCode[\"RangeNotSatisfiable\"] = 416] = \"RangeNotSatisfiable\";\n  HttpStatusCode[HttpStatusCode[\"ExpectationFailed\"] = 417] = \"ExpectationFailed\";\n  HttpStatusCode[HttpStatusCode[\"ImATeapot\"] = 418] = \"ImATeapot\";\n  HttpStatusCode[HttpStatusCode[\"MisdirectedRequest\"] = 421] = \"MisdirectedRequest\";\n  HttpStatusCode[HttpStatusCode[\"UnprocessableEntity\"] = 422] = \"UnprocessableEntity\";\n  HttpStatusCode[HttpStatusCode[\"Locked\"] = 423] = \"Locked\";\n  HttpStatusCode[HttpStatusCode[\"FailedDependency\"] = 424] = \"FailedDependency\";\n  HttpStatusCode[HttpStatusCode[\"TooEarly\"] = 425] = \"TooEarly\";\n  HttpStatusCode[HttpStatusCode[\"UpgradeRequired\"] = 426] = \"UpgradeRequired\";\n  HttpStatusCode[HttpStatusCode[\"PreconditionRequired\"] = 428] = \"PreconditionRequired\";\n  HttpStatusCode[HttpStatusCode[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n  HttpStatusCode[HttpStatusCode[\"RequestHeaderFieldsTooLarge\"] = 431] = \"RequestHeaderFieldsTooLarge\";\n  HttpStatusCode[HttpStatusCode[\"UnavailableForLegalReasons\"] = 451] = \"UnavailableForLegalReasons\";\n  HttpStatusCode[HttpStatusCode[\"InternalServerError\"] = 500] = \"InternalServerError\";\n  HttpStatusCode[HttpStatusCode[\"NotImplemented\"] = 501] = \"NotImplemented\";\n  HttpStatusCode[HttpStatusCode[\"BadGateway\"] = 502] = \"BadGateway\";\n  HttpStatusCode[HttpStatusCode[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n  HttpStatusCode[HttpStatusCode[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n  HttpStatusCode[HttpStatusCode[\"HttpVersionNotSupported\"] = 505] = \"HttpVersionNotSupported\";\n  HttpStatusCode[HttpStatusCode[\"VariantAlsoNegotiates\"] = 506] = \"VariantAlsoNegotiates\";\n  HttpStatusCode[HttpStatusCode[\"InsufficientStorage\"] = 507] = \"InsufficientStorage\";\n  HttpStatusCode[HttpStatusCode[\"LoopDetected\"] = 508] = \"LoopDetected\";\n  HttpStatusCode[HttpStatusCode[\"NotExtended\"] = 510] = \"NotExtended\";\n  HttpStatusCode[HttpStatusCode[\"NetworkAuthenticationRequired\"] = 511] = \"NetworkAuthenticationRequired\";\n  return HttpStatusCode;\n}(HttpStatusCode || {});\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n  return {\n    body: body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n    transferCache: options.transferCache\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/understanding-communicating-with-http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nvar HttpClient = /*#__PURE__*/(function () {\n  var _HttpClient;\n  var HttpClient = /*#__PURE__*/function () {\n    function HttpClient(handler) {\n      _classCallCheck(this, HttpClient);\n      this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    return _createClass(HttpClient, [{\n      key: \"request\",\n      value: function request(first, url) {\n        var _this1 = this;\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n          // It is. The other arguments must be undefined (per the signatures) and can be\n          // ignored.\n          req = first;\n        } else {\n          // It's a string, so it represents a URL. Construct a request based on it,\n          // and incorporate the remaining arguments (assuming `GET` unless a method is\n          // provided.\n          // Figure out the headers.\n          var headers = undefined;\n          if (options.headers instanceof HttpHeaders) {\n            headers = options.headers;\n          } else {\n            headers = new HttpHeaders(options.headers);\n          }\n          // Sort out parameters.\n          var params = undefined;\n          if (!!options.params) {\n            if (options.params instanceof HttpParams) {\n              params = options.params;\n            } else {\n              params = new HttpParams({\n                fromObject: options.params\n              });\n            }\n          }\n          // Construct the request.\n          req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n            headers: headers,\n            context: options.context,\n            params: params,\n            reportProgress: options.reportProgress,\n            // By default, JSON is assumed to be returned for all calls.\n            responseType: options.responseType || 'json',\n            withCredentials: options.withCredentials,\n            transferCache: options.transferCache\n          });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var events$ = of(req).pipe(concatMap(function (req) {\n          return _this1.handler.handle(req);\n        }));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n          return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var res$ = events$.pipe(filter(function (event) {\n          return event instanceof HttpResponse;\n        }));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n          case 'body':\n            // The requested stream is the body. Map the response stream to the response\n            // body. This could be done more simply, but a misbehaving interceptor might\n            // transform the response body into a different format and ignore the requested\n            // responseType. Guard against this by validating that the response is of the\n            // requested type.\n            switch (req.responseType) {\n              case 'arraybuffer':\n                return res$.pipe(map(function (res) {\n                  // Validate that the body is an ArrayBuffer.\n                  if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                    throw new Error('Response is not an ArrayBuffer.');\n                  }\n                  return res.body;\n                }));\n              case 'blob':\n                return res$.pipe(map(function (res) {\n                  // Validate that the body is a Blob.\n                  if (res.body !== null && !(res.body instanceof Blob)) {\n                    throw new Error('Response is not a Blob.');\n                  }\n                  return res.body;\n                }));\n              case 'text':\n                return res$.pipe(map(function (res) {\n                  // Validate that the body is a string.\n                  if (res.body !== null && typeof res.body !== 'string') {\n                    throw new Error('Response is not a string.');\n                  }\n                  return res.body;\n                }));\n              case 'json':\n              default:\n                // No validation needed for JSON responses, as they can be of any type.\n                return res$.pipe(map(function (res) {\n                  return res.body;\n                }));\n            }\n          case 'response':\n            // The response stream was requested directly, so return it.\n            return res$;\n          default:\n            // Guard against new future observe types being added.\n            throw new Error(\"Unreachable: unhandled observe type \".concat(options.observe, \"}\"));\n        }\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `DELETE` request to execute on the server. See the individual overloads for\n       * details on the return type.\n       *\n       * @param url     The endpoint URL.\n       * @param options The HTTP options to send with the request.\n       *\n       */\n    }, {\n      key: \"delete\",\n      value: function _delete(url) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.request('DELETE', url, options);\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `GET` request to execute on the server. See the individual overloads for\n       * details on the return type.\n       */\n    }, {\n      key: \"get\",\n      value: function get(url) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.request('GET', url, options);\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `HEAD` request to execute on the server. The `HEAD` method returns\n       * meta information about the resource without transferring the\n       * resource itself. See the individual overloads for\n       * details on the return type.\n       */\n    }, {\n      key: \"head\",\n      value: function head(url) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.request('HEAD', url, options);\n      }\n      /**\n       * Constructs an `Observable` that, when subscribed, causes a request with the special method\n       * `JSONP` to be dispatched via the interceptor pipeline.\n       * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n       * API endpoints that don't support newer,\n       * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n       * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n       * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n       * application making the request.\n       * The endpoint API must support JSONP callback for JSONP requests to work.\n       * The resource API returns the JSON response wrapped in a callback function.\n       * You can pass the callback function name as one of the query parameters.\n       * Note that JSONP requests can only be used with `GET` requests.\n       *\n       * @param url The resource URL.\n       * @param callbackParam The callback function name.\n       *\n       */\n    }, {\n      key: \"jsonp\",\n      value: function jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n          params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n          observe: 'body',\n          responseType: 'json'\n        });\n      }\n      /**\n       * Constructs an `Observable` that, when subscribed, causes the configured\n       * `OPTIONS` request to execute on the server. This method allows the client\n       * to determine the supported HTTP methods and other capabilities of an endpoint,\n       * without implying a resource action. See the individual overloads for\n       * details on the return type.\n       */\n    }, {\n      key: \"options\",\n      value: function options(url) {\n        var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.request('OPTIONS', url, _options);\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `PATCH` request to execute on the server. See the individual overloads for\n       * details on the return type.\n       */\n    }, {\n      key: \"patch\",\n      value: function patch(url, body) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return this.request('PATCH', url, addBody(options, body));\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `POST` request to execute on the server. The server responds with the location of\n       * the replaced resource. See the individual overloads for\n       * details on the return type.\n       */\n    }, {\n      key: \"post\",\n      value: function post(url, body) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return this.request('POST', url, addBody(options, body));\n      }\n      /**\n       * Constructs an observable that, when subscribed, causes the configured\n       * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n       * with a new set of values.\n       * See the individual overloads for details on the return type.\n       */\n    }, {\n      key: \"put\",\n      value: function put(url, body) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return this.request('PUT', url, addBody(options, body));\n      }\n    }]);\n  }();\n  _HttpClient = HttpClient;\n  _HttpClient.ɵfac = function _HttpClient_Factory(t) {\n    return new (t || _HttpClient)(i0.ɵɵinject(HttpHandler));\n  };\n  _HttpClient.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _HttpClient,\n    factory: _HttpClient.ɵfac\n  });\n  return HttpClient;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar XSSI_PREFIX$1 = /^\\)\\]\\}',?\\n/;\nvar REQUEST_URL_HEADER = \"X-Request-URL\";\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl$1(response) {\n  if (response.url) {\n    return response.url;\n  }\n  // stored as lowercase in the map\n  var xRequestUrl = REQUEST_URL_HEADER.toLocaleLowerCase();\n  return response.headers.get(xRequestUrl);\n}\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n */\nvar FetchBackend = /*#__PURE__*/(function () {\n  var _FetchBackend;\n  var FetchBackend = /*#__PURE__*/function () {\n    function FetchBackend() {\n      var _inject$fetch, _inject;\n      _classCallCheck(this, FetchBackend);\n      // We need to bind the native fetch to its context or it will throw an \"illegal invocation\"\n      this.fetchImpl = (_inject$fetch = (_inject = inject(FetchFactory, {\n        optional: true\n      })) === null || _inject === void 0 ? void 0 : _inject.fetch) !== null && _inject$fetch !== void 0 ? _inject$fetch : fetch.bind(globalThis);\n      this.ngZone = inject(NgZone);\n    }\n    return _createClass(FetchBackend, [{\n      key: \"handle\",\n      value: function handle(request) {\n        var _this10 = this;\n        return new Observable(function (observer) {\n          var aborter = new AbortController();\n          _this10.doRequest(request, aborter.signal, observer).then(noop, function (error) {\n            return observer.error(new HttpErrorResponse({\n              error: error\n            }));\n          });\n          return function () {\n            return aborter.abort();\n          };\n        });\n      }\n    }, {\n      key: \"doRequest\",\n      value: function () {\n        var _doRequest = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(request, signal, observer) {\n          var _getResponseUrl$;\n          var init, response, fetchPromise, _error$status, headers, statusText, url, status, body, contentLength, chunks, reader, receivedLength, decoder, partialText, reqZone, chunksAll, _response$headers$get, contentType, _getResponseUrl$2, ok, _t, _t2;\n          return _regenerator().w(function (_context2) {\n            while (1) switch (_context2.p = _context2.n) {\n              case 0:\n                init = this.createRequestInit(request);\n                _context2.p = 1;\n                fetchPromise = this.fetchImpl(request.urlWithParams, _objectSpread({\n                  signal: signal\n                }, init)); // Make sure Zone.js doesn't trigger false-positive unhandled promise\n                // error in case the Promise is rejected synchronously. See function\n                // description for additional information.\n                silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n                // Send the `Sent` event before awaiting the response.\n                observer.next({\n                  type: HttpEventType.Sent\n                });\n                _context2.n = 2;\n                return fetchPromise;\n              case 2:\n                response = _context2.v;\n                _context2.n = 4;\n                break;\n              case 3:\n                _context2.p = 3;\n                _t = _context2.v;\n                observer.error(new HttpErrorResponse({\n                  error: _t,\n                  status: (_error$status = _t.status) !== null && _error$status !== void 0 ? _error$status : 0,\n                  statusText: _t.statusText,\n                  url: request.urlWithParams,\n                  headers: _t.headers\n                }));\n                return _context2.a(2);\n              case 4:\n                headers = new HttpHeaders(response.headers);\n                statusText = response.statusText;\n                url = (_getResponseUrl$ = getResponseUrl$1(response)) !== null && _getResponseUrl$ !== void 0 ? _getResponseUrl$ : request.urlWithParams;\n                status = response.status;\n                body = null;\n                if (request.reportProgress) {\n                  observer.next(new HttpHeaderResponse({\n                    headers: headers,\n                    status: status,\n                    statusText: statusText,\n                    url: url\n                  }));\n                }\n                if (!response.body) {\n                  _context2.n = 8;\n                  break;\n                }\n                // Read Progress\n                contentLength = response.headers.get('content-length');\n                chunks = [];\n                reader = response.body.getReader();\n                receivedLength = 0;\n                // We have to check whether the Zone is defined in the global scope because this may be called\n                // when the zone is nooped.\n                reqZone = typeof Zone !== 'undefined' && Zone.current; // Perform response processing outside of Angular zone to\n                // ensure no excessive change detection runs are executed\n                // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n                _context2.n = 5;\n                return this.ngZone.runOutsideAngular(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n                  var _yield$reader$read, done, value, reportProgress;\n                  return _regenerator().w(function (_context) {\n                    while (1) switch (_context.n) {\n                      case 0:\n                        if (!true) {\n                          _context.n = 3;\n                          break;\n                        }\n                        _context.n = 1;\n                        return reader.read();\n                      case 1:\n                        _yield$reader$read = _context.v;\n                        done = _yield$reader$read.done;\n                        value = _yield$reader$read.value;\n                        if (!done) {\n                          _context.n = 2;\n                          break;\n                        }\n                        return _context.a(3, 3);\n                      case 2:\n                        chunks.push(value);\n                        receivedLength += value.length;\n                        if (request.reportProgress) {\n                          partialText = request.responseType === 'text' ? (partialText !== null && partialText !== void 0 ? partialText : '') + (decoder !== null && decoder !== void 0 ? decoder : decoder = new TextDecoder()).decode(value, {\n                            stream: true\n                          }) : undefined;\n                          reportProgress = function reportProgress() {\n                            return observer.next({\n                              type: HttpEventType.DownloadProgress,\n                              total: contentLength ? +contentLength : undefined,\n                              loaded: receivedLength,\n                              partialText: partialText\n                            });\n                          };\n                          reqZone ? reqZone.run(reportProgress) : reportProgress();\n                        }\n                        _context.n = 0;\n                        break;\n                      case 3:\n                        return _context.a(2);\n                    }\n                  }, _callee);\n                })));\n              case 5:\n                // Combine all chunks.\n                chunksAll = this.concatChunks(chunks, receivedLength);\n                _context2.p = 6;\n                contentType = (_response$headers$get = response.headers.get('Content-Type')) !== null && _response$headers$get !== void 0 ? _response$headers$get : '';\n                body = this.parseBody(request, chunksAll, contentType);\n                _context2.n = 8;\n                break;\n              case 7:\n                _context2.p = 7;\n                _t2 = _context2.v;\n                // Body loading or parsing failed\n                observer.error(new HttpErrorResponse({\n                  error: _t2,\n                  headers: new HttpHeaders(response.headers),\n                  status: response.status,\n                  statusText: response.statusText,\n                  url: (_getResponseUrl$2 = getResponseUrl$1(response)) !== null && _getResponseUrl$2 !== void 0 ? _getResponseUrl$2 : request.urlWithParams\n                }));\n                return _context2.a(2);\n              case 8:\n                // Same behavior as the XhrBackend\n                if (status === 0) {\n                  status = body ? HttpStatusCode.Ok : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                ok = status >= 200 && status < 300;\n                if (ok) {\n                  observer.next(new HttpResponse({\n                    body: body,\n                    headers: headers,\n                    status: status,\n                    statusText: statusText,\n                    url: url\n                  }));\n                  // The full body has been received and delivered, no further events\n                  // are possible. This request is complete.\n                  observer.complete();\n                } else {\n                  observer.error(new HttpErrorResponse({\n                    error: body,\n                    headers: headers,\n                    status: status,\n                    statusText: statusText,\n                    url: url\n                  }));\n                }\n              case 9:\n                return _context2.a(2);\n            }\n          }, _callee2, this, [[6, 7], [1, 3]]);\n        }));\n        function doRequest(_x, _x2, _x3) {\n          return _doRequest.apply(this, arguments);\n        }\n        return doRequest;\n      }()\n    }, {\n      key: \"parseBody\",\n      value: function parseBody(request, binContent, contentType) {\n        switch (request.responseType) {\n          case 'json':\n            // stripping the XSSI when present\n            var text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, '');\n            return text === '' ? null : JSON.parse(text);\n          case 'text':\n            return new TextDecoder().decode(binContent);\n          case 'blob':\n            return new Blob([binContent], {\n              type: contentType\n            });\n          case 'arraybuffer':\n            return binContent.buffer;\n        }\n      }\n    }, {\n      key: \"createRequestInit\",\n      value: function createRequestInit(req) {\n        var _Accept, _headers$_Accept;\n        // We could share some of this logic with the XhrBackend\n        var headers = {};\n        var credentials = req.withCredentials ? 'include' : undefined;\n        // Setting all the requested headers.\n        req.headers.forEach(function (name, values) {\n          return headers[name] = values.join(',');\n        });\n        // Add an Accept header if one isn't present already.\n        (_headers$_Accept = headers[_Accept = 'Accept']) !== null && _headers$_Accept !== void 0 ? _headers$_Accept : headers[_Accept] = 'application/json, text/plain, */*';\n        // Auto-detect the Content-Type header if one isn't present already.\n        if (!headers['Content-Type']) {\n          var detectedType = req.detectContentTypeHeader();\n          // Sometimes Content-Type detection fails.\n          if (detectedType !== null) {\n            headers['Content-Type'] = detectedType;\n          }\n        }\n        return {\n          body: req.serializeBody(),\n          method: req.method,\n          headers: headers,\n          credentials: credentials\n        };\n      }\n    }, {\n      key: \"concatChunks\",\n      value: function concatChunks(chunks, totalLength) {\n        var chunksAll = new Uint8Array(totalLength);\n        var position = 0;\n        var _iterator = _createForOfIteratorHelper(chunks),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var chunk = _step.value;\n            chunksAll.set(chunk, position);\n            position += chunk.length;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return chunksAll;\n      }\n    }]);\n  }();\n  _FetchBackend = FetchBackend;\n  _FetchBackend.ɵfac = function _FetchBackend_Factory(t) {\n    return new (t || _FetchBackend)();\n  };\n  _FetchBackend.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _FetchBackend,\n    factory: _FetchBackend.ɵfac\n  });\n  return FetchBackend;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nvar FetchFactory = /*#__PURE__*/_createClass(function FetchFactory() {\n  _classCallCheck(this, FetchFactory);\n});\nfunction noop() {}\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise) {\n  promise.then(noop, noop);\n}\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n  return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n  return function (initialRequest, finalHandlerFn) {\n    return interceptor.intercept(initialRequest, {\n      handle: function handle(downstreamRequest) {\n        return chainTailFn(downstreamRequest, finalHandlerFn);\n      }\n    });\n  };\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n  // clang-format off\n  return function (initialRequest, finalHandlerFn) {\n    return runInInjectionContext(injector, function () {\n      return interceptorFn(initialRequest, function (downstreamRequest) {\n        return chainTailFn(downstreamRequest, finalHandlerFn);\n      });\n    });\n  };\n  // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nvar HTTP_INTERCEPTORS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nvar HTTP_INTERCEPTOR_FNS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nvar HTTP_ROOT_INTERCEPTOR_FNS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n/**\n * A provider to set a global primary http backend. If set, it will override the default one\n */\nvar PRIMARY_HTTP_BACKEND = /*#__PURE__*/new InjectionToken(ngDevMode ? 'PRIMARY_HTTP_BACKEND' : '');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n  var chain = null;\n  return function (req, handler) {\n    if (chain === null) {\n      var _inject2;\n      var interceptors = (_inject2 = inject(HTTP_INTERCEPTORS, {\n        optional: true\n      })) !== null && _inject2 !== void 0 ? _inject2 : [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n    }\n    var pendingTasks = inject(ɵPendingTasks);\n    var taskId = pendingTasks.add();\n    return chain(req, handler).pipe(finalize(function () {\n      return pendingTasks.remove(taskId);\n    }));\n  };\n}\nvar fetchBackendWarningDisplayed = false;\n/** Internal function to reset the flag in tests */\nfunction resetFetchBackendWarningFlag() {\n  fetchBackendWarningDisplayed = false;\n}\nvar HttpInterceptorHandler = /*#__PURE__*/(function () {\n  var _HttpInterceptorHandler;\n  var HttpInterceptorHandler = /*#__PURE__*/function (_HttpHandler) {\n    function HttpInterceptorHandler(backend, injector) {\n      var _this11;\n      _classCallCheck(this, HttpInterceptorHandler);\n      _this11 = _callSuper(this, HttpInterceptorHandler);\n      _this11.backend = backend;\n      _this11.injector = injector;\n      _this11.chain = null;\n      _this11.pendingTasks = inject(ɵPendingTasks);\n      // Check if there is a preferred HTTP backend configured and use it if that's the case.\n      // This is needed to enable `FetchBackend` globally for all HttpClient's when `withFetch`\n      // is used.\n      var primaryHttpBackend = inject(PRIMARY_HTTP_BACKEND, {\n        optional: true\n      });\n      _this11.backend = primaryHttpBackend !== null && primaryHttpBackend !== void 0 ? primaryHttpBackend : backend;\n      // We strongly recommend using fetch backend for HTTP calls when SSR is used\n      // for an application. The logic below checks if that's the case and produces\n      // a warning otherwise.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\n        var isServer = isPlatformServer(injector.get(PLATFORM_ID));\n        if (isServer && !(_this11.backend instanceof FetchBackend)) {\n          fetchBackendWarningDisplayed = true;\n          injector.get(ɵConsole).warn(ɵformatRuntimeError(2801 /* RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR */, 'Angular detected that `HttpClient` is not configured ' + \"to use `fetch` APIs. It's strongly recommended to \" + 'enable `fetch` for applications that use Server-Side Rendering ' + 'for better performance and compatibility. ' + 'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' + 'call at the root of the application.'));\n        }\n      }\n      return _this11;\n    }\n    _inherits(HttpInterceptorHandler, _HttpHandler);\n    return _createClass(HttpInterceptorHandler, [{\n      key: \"handle\",\n      value: function handle(initialRequest) {\n        var _this12 = this;\n        if (this.chain === null) {\n          var dedupedInterceptorFns = Array.from(new Set([].concat(_toConsumableArray(this.injector.get(HTTP_INTERCEPTOR_FNS)), _toConsumableArray(this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, [])))));\n          // Note: interceptors are wrapped right-to-left so that final execution order is\n          // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n          // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n          // out.\n          this.chain = dedupedInterceptorFns.reduceRight(function (nextSequencedFn, interceptorFn) {\n            return chainedInterceptorFn(nextSequencedFn, interceptorFn, _this12.injector);\n          }, interceptorChainEndFn);\n        }\n        var taskId = this.pendingTasks.add();\n        return this.chain(initialRequest, function (downstreamRequest) {\n          return _this12.backend.handle(downstreamRequest);\n        }).pipe(finalize(function () {\n          return _this12.pendingTasks.remove(taskId);\n        }));\n      }\n    }]);\n  }(HttpHandler);\n  _HttpInterceptorHandler = HttpInterceptorHandler;\n  _HttpInterceptorHandler.ɵfac = function _HttpInterceptorHandler_Factory(t) {\n    return new (t || _HttpInterceptorHandler)(i0.ɵɵinject(HttpBackend), i0.ɵɵinject(i0.EnvironmentInjector));\n  };\n  _HttpInterceptorHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _HttpInterceptorHandler,\n    factory: _HttpInterceptorHandler.ɵfac\n  });\n  return HttpInterceptorHandler;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nvar foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nvar JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nvar JsonpCallbackContext = /*#__PURE__*/_createClass(function JsonpCallbackContext() {\n  _classCallCheck(this, JsonpCallbackContext);\n});\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\nvar JsonpClientBackend = /*#__PURE__*/(function () {\n  var _JsonpClientBackend;\n  var JsonpClientBackend = /*#__PURE__*/function () {\n    function JsonpClientBackend(callbackMap, document) {\n      _classCallCheck(this, JsonpClientBackend);\n      this.callbackMap = callbackMap;\n      this.document = document;\n      /**\n       * A resolved promise that can be used to schedule microtasks in the event handlers.\n       */\n      this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    return _createClass(JsonpClientBackend, [{\n      key: \"nextCallback\",\n      value: function nextCallback() {\n        return \"ng_jsonp_callback_\".concat(nextRequestId++);\n      }\n      /**\n       * Processes a JSONP request and returns an event stream of the results.\n       * @param req The request object.\n       * @returns An observable of the response events.\n       *\n       */\n    }, {\n      key: \"handle\",\n      value: function handle(req) {\n        var _this13 = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n          throw new Error(JSONP_ERR_WRONG_METHOD);\n        } else if (req.responseType !== 'json') {\n          throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n          throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable(function (observer) {\n          // The first step to make a request is to generate the callback name, and replace the\n          // callback placeholder in the URL with the name. Care has to be taken here to ensure\n          // a trailing &, if matched, gets inserted back into the URL in the correct place.\n          var callback = _this13.nextCallback();\n          var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\".concat(callback, \"$1\"));\n          // Construct the <script> tag and point it at the URL.\n          var node = _this13.document.createElement('script');\n          node.src = url;\n          // A JSONP request requires waiting for multiple callbacks. These variables\n          // are closed over and track state across those callbacks.\n          // The response object, if one has been received, or null otherwise.\n          var body = null;\n          // Whether the response callback has been called.\n          var finished = false;\n          // Set the response callback in this.callbackMap (which will be the window\n          // object in the browser. The script being loaded via the <script> tag will\n          // eventually call this callback.\n          _this13.callbackMap[callback] = function (data) {\n            // Data has been received from the JSONP script. Firstly, delete this callback.\n            delete _this13.callbackMap[callback];\n            // Set state to indicate data was received.\n            body = data;\n            finished = true;\n          };\n          // cleanup() is a utility closure that removes the <script> from the page and\n          // the response callback from the window. This logic is used in both the\n          // success, error, and cancellation paths, so it's extracted out for convenience.\n          var cleanup = function cleanup() {\n            // Remove the <script> tag if it's still on the page.\n            if (node.parentNode) {\n              node.parentNode.removeChild(node);\n            }\n            // Remove the response callback from the callbackMap (window object in the\n            // browser).\n            delete _this13.callbackMap[callback];\n          };\n          // onLoad() is the success callback which runs after the response callback\n          // if the JSONP script loads successfully. The event itself is unimportant.\n          // If something went wrong, onLoad() may run without the response callback\n          // having been invoked.\n          var onLoad = function onLoad(event) {\n            // We wrap it in an extra Promise, to ensure the microtask\n            // is scheduled after the loaded endpoint has executed any potential microtask itself,\n            // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n            _this13.resolvedPromise.then(function () {\n              // Cleanup the page.\n              cleanup();\n              // Check whether the response callback has run.\n              if (!finished) {\n                // It hasn't, something went wrong with the request. Return an error via\n                // the Observable error path. All JSONP errors have status 0.\n                observer.error(new HttpErrorResponse({\n                  url: url,\n                  status: 0,\n                  statusText: 'JSONP Error',\n                  error: new Error(JSONP_ERR_NO_CALLBACK)\n                }));\n                return;\n              }\n              // Success. body either contains the response body or null if none was\n              // returned.\n              observer.next(new HttpResponse({\n                body: body,\n                status: HttpStatusCode.Ok,\n                statusText: 'OK',\n                url: url\n              }));\n              // Complete the stream, the response is over.\n              observer.complete();\n            });\n          };\n          // onError() is the error callback, which runs if the script returned generates\n          // a Javascript error. It emits the error via the Observable error channel as\n          // a HttpErrorResponse.\n          var onError = function onError(error) {\n            cleanup();\n            // Wrap the error in a HttpErrorResponse.\n            observer.error(new HttpErrorResponse({\n              error: error,\n              status: 0,\n              statusText: 'JSONP Error',\n              url: url\n            }));\n          };\n          // Subscribe to both the success (load) and error events on the <script> tag,\n          // and add it to the page.\n          node.addEventListener('load', onLoad);\n          node.addEventListener('error', onError);\n          _this13.document.body.appendChild(node);\n          // The request has now been successfully sent.\n          observer.next({\n            type: HttpEventType.Sent\n          });\n          // Cancellation handler.\n          return function () {\n            if (!finished) {\n              _this13.removeListeners(node);\n            }\n            // And finally, clean up the page.\n            cleanup();\n          };\n        });\n      }\n    }, {\n      key: \"removeListeners\",\n      value: function removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        foreignDocument !== null && foreignDocument !== void 0 ? foreignDocument : foreignDocument = this.document.implementation.createHTMLDocument();\n        foreignDocument.adoptNode(script);\n      }\n    }]);\n  }();\n  _JsonpClientBackend = JsonpClientBackend;\n  _JsonpClientBackend.ɵfac = function _JsonpClientBackend_Factory(t) {\n    return new (t || _JsonpClientBackend)(i0.ɵɵinject(JsonpCallbackContext), i0.ɵɵinject(DOCUMENT));\n  };\n  _JsonpClientBackend.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _JsonpClientBackend,\n    factory: _JsonpClientBackend.ɵfac\n  });\n  return JsonpClientBackend;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req);\n  }\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\nvar JsonpInterceptor = /*#__PURE__*/(function () {\n  var _JsonpInterceptor;\n  var JsonpInterceptor = /*#__PURE__*/function () {\n    function JsonpInterceptor(injector) {\n      _classCallCheck(this, JsonpInterceptor);\n      this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    return _createClass(JsonpInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(initialRequest, next) {\n        return runInInjectionContext(this.injector, function () {\n          return jsonpInterceptorFn(initialRequest, function (downstreamRequest) {\n            return next.handle(downstreamRequest);\n          });\n        });\n      }\n    }]);\n  }();\n  _JsonpInterceptor = JsonpInterceptor;\n  _JsonpInterceptor.ɵfac = function _JsonpInterceptor_Factory(t) {\n    return new (t || _JsonpInterceptor)(i0.ɵɵinject(i0.EnvironmentInjector));\n  };\n  _JsonpInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _JsonpInterceptor,\n    factory: _JsonpInterceptor.ɵfac\n  });\n  return JsonpInterceptor;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\nvar HttpXhrBackend = /*#__PURE__*/(function () {\n  var _HttpXhrBackend;\n  var HttpXhrBackend = /*#__PURE__*/function () {\n    function HttpXhrBackend(xhrFactory) {\n      _classCallCheck(this, HttpXhrBackend);\n      this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    return _createClass(HttpXhrBackend, [{\n      key: \"handle\",\n      value: function handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n          throw new ɵRuntimeError(-2800 /* RuntimeErrorCode.MISSING_JSONP_MODULE */, (typeof ngDevMode === 'undefined' || ngDevMode) && \"Cannot make a JSONP request without JSONP support. To fix the problem, either add the `withJsonpSupport()` call (if `provideHttpClient()` is used) or import the `HttpClientJsonpModule` in the root NgModule.\");\n        }\n        // Check whether this factory has a special function to load an XHR implementation\n        // for various non-browser environments. We currently limit it to only `ServerXhr`\n        // class, which needs to load an XHR implementation.\n        var xhrFactory = this.xhrFactory;\n        var source = xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n        return source.pipe(switchMap(function () {\n          // Everything happens on Observable subscription.\n          return new Observable(function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials\n            // flag.\n            var xhr = xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (req.withCredentials) {\n              xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) {\n              return xhr.setRequestHeader(name, values.join(','));\n            });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n              xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n              var detectedType = req.detectContentTypeHeader();\n              // Sometimes Content-Type detection fails.\n              if (detectedType !== null) {\n                xhr.setRequestHeader('Content-Type', detectedType);\n              }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n              var responseType = req.responseType.toLowerCase();\n              // JSON responses need to be processed as text. This is because if the server\n              // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n              // xhr.response will be null, and xhr.responseText cannot be accessed to\n              // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n              // is parsed by first requesting text and then applying JSON.parse.\n              xhr.responseType = responseType !== 'json' ? responseType : 'text';\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var partialFromXhr = function partialFromXhr() {\n              if (headerResponse !== null) {\n                return headerResponse;\n              }\n              var statusText = xhr.statusText || 'OK';\n              // Parse headers from XMLHttpRequest - this step is lazy.\n              var headers = new HttpHeaders(xhr.getAllResponseHeaders());\n              // Read the response URL from the XMLHttpResponse instance and fall back on the\n              // request URL.\n              var url = getResponseUrl(xhr) || req.url;\n              // Construct the HttpHeaderResponse and memoize it.\n              headerResponse = new HttpHeaderResponse({\n                headers: headers,\n                status: xhr.status,\n                statusText: statusText,\n                url: url\n              });\n              return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var onLoad = function onLoad() {\n              // Read response state from the memoized partial data.\n              var _partialFromXhr = partialFromXhr(),\n                headers = _partialFromXhr.headers,\n                status = _partialFromXhr.status,\n                statusText = _partialFromXhr.statusText,\n                url = _partialFromXhr.url;\n              // The body will be read out if present.\n              var body = null;\n              if (status !== HttpStatusCode.NoContent) {\n                // Use XMLHttpRequest.response if set, responseText otherwise.\n                body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n              }\n              // Normalize another potential bug (this one comes from CORS).\n              if (status === 0) {\n                status = !!body ? HttpStatusCode.Ok : 0;\n              }\n              // ok determines whether the response will be transmitted on the event or\n              // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n              // but a successful status code can still result in an error if the user\n              // asked for JSON data and the body cannot be parsed as such.\n              var ok = status >= 200 && status < 300;\n              // Check whether the body needs to be parsed as JSON (in many cases the browser\n              // will have done that already).\n              if (req.responseType === 'json' && typeof body === 'string') {\n                // Save the original body, before attempting XSSI prefix stripping.\n                var originalBody = body;\n                body = body.replace(XSSI_PREFIX, '');\n                try {\n                  // Attempt the parse. If it fails, a parse error should be delivered to the\n                  // user.\n                  body = body !== '' ? JSON.parse(body) : null;\n                } catch (error) {\n                  // Since the JSON.parse failed, it's reasonable to assume this might not have\n                  // been a JSON response. Restore the original body (including any XSSI prefix)\n                  // to deliver a better error response.\n                  body = originalBody;\n                  // If this was an error request to begin with, leave it as a string, it\n                  // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                  if (ok) {\n                    // Even though the response status was 2xx, this is still an error.\n                    ok = false;\n                    // The parse error contains the text of the body that failed to parse.\n                    body = {\n                      error: error,\n                      text: body\n                    };\n                  }\n                }\n              }\n              if (ok) {\n                // A successful response is delivered on the event stream.\n                observer.next(new HttpResponse({\n                  body: body,\n                  headers: headers,\n                  status: status,\n                  statusText: statusText,\n                  url: url || undefined\n                }));\n                // The full body has been received and delivered, no further events\n                // are possible. This request is complete.\n                observer.complete();\n              } else {\n                // An unsuccessful request is delivered on the error channel.\n                observer.error(new HttpErrorResponse({\n                  // The error in this case is the response body (error from the server).\n                  error: body,\n                  headers: headers,\n                  status: status,\n                  statusText: statusText,\n                  url: url || undefined\n                }));\n              }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var onError = function onError(error) {\n              var _partialFromXhr2 = partialFromXhr(),\n                url = _partialFromXhr2.url;\n              var res = new HttpErrorResponse({\n                error: error,\n                status: xhr.status || 0,\n                statusText: xhr.statusText || 'Unknown Error',\n                url: url || undefined\n              });\n              observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progress event.\n            var sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var onDownProgress = function onDownProgress(event) {\n              // Send the HttpResponseHeaders event if it hasn't been sent already.\n              if (!sentHeaders) {\n                observer.next(partialFromXhr());\n                sentHeaders = true;\n              }\n              // Start building the download progress event to deliver on the response\n              // event stream.\n              var progressEvent = {\n                type: HttpEventType.DownloadProgress,\n                loaded: event.loaded\n              };\n              // Set the total number of bytes in the event if it's available.\n              if (event.lengthComputable) {\n                progressEvent.total = event.total;\n              }\n              // If the request was for text content and a partial response is\n              // available on XMLHttpRequest, include it in the progress event\n              // to allow for streaming reads.\n              if (req.responseType === 'text' && !!xhr.responseText) {\n                progressEvent.partialText = xhr.responseText;\n              }\n              // Finally, fire the event.\n              observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var onUpProgress = function onUpProgress(event) {\n              // Upload progress events are simpler. Begin building the progress\n              // event.\n              var progress = {\n                type: HttpEventType.UploadProgress,\n                loaded: event.loaded\n              };\n              // If the total number of bytes being uploaded is available, include\n              // it.\n              if (event.lengthComputable) {\n                progress.total = event.total;\n              }\n              // Send the event.\n              observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n              // Download progress is always enabled if requested.\n              xhr.addEventListener('progress', onDownProgress);\n              // Upload progress depends on whether there is a body to upload.\n              if (reqBody !== null && xhr.upload) {\n                xhr.upload.addEventListener('progress', onUpProgress);\n              }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({\n              type: HttpEventType.Sent\n            });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n              // On a cancellation, remove all registered event listeners.\n              xhr.removeEventListener('error', onError);\n              xhr.removeEventListener('abort', onError);\n              xhr.removeEventListener('load', onLoad);\n              xhr.removeEventListener('timeout', onError);\n              if (req.reportProgress) {\n                xhr.removeEventListener('progress', onDownProgress);\n                if (reqBody !== null && xhr.upload) {\n                  xhr.upload.removeEventListener('progress', onUpProgress);\n                }\n              }\n              // Finally, abort the in-flight request.\n              if (xhr.readyState !== xhr.DONE) {\n                xhr.abort();\n              }\n            };\n          });\n        }));\n      }\n    }]);\n  }();\n  _HttpXhrBackend = HttpXhrBackend;\n  _HttpXhrBackend.ɵfac = function _HttpXhrBackend_Factory(t) {\n    return new (t || _HttpXhrBackend)(i0.ɵɵinject(i1.XhrFactory));\n  };\n  _HttpXhrBackend.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _HttpXhrBackend,\n    factory: _HttpXhrBackend.ɵfac\n  });\n  return HttpXhrBackend;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nvar XSRF_ENABLED = /*#__PURE__*/new InjectionToken(ngDevMode ? 'XSRF_ENABLED' : '');\nvar XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nvar XSRF_COOKIE_NAME = /*#__PURE__*/new InjectionToken(ngDevMode ? 'XSRF_COOKIE_NAME' : '', {\n  providedIn: 'root',\n  factory: function factory() {\n    return XSRF_DEFAULT_COOKIE_NAME;\n  }\n});\nvar XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nvar XSRF_HEADER_NAME = /*#__PURE__*/new InjectionToken(ngDevMode ? 'XSRF_HEADER_NAME' : '', {\n  providedIn: 'root',\n  factory: function factory() {\n    return XSRF_DEFAULT_HEADER_NAME;\n  }\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nvar HttpXsrfTokenExtractor = /*#__PURE__*/_createClass(function HttpXsrfTokenExtractor() {\n  _classCallCheck(this, HttpXsrfTokenExtractor);\n});\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = /*#__PURE__*/(function () {\n  var _HttpXsrfCookieExtractor;\n  var HttpXsrfCookieExtractor = /*#__PURE__*/function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n      _classCallCheck(this, HttpXsrfCookieExtractor);\n      this.doc = doc;\n      this.platform = platform;\n      this.cookieName = cookieName;\n      this.lastCookieString = '';\n      this.lastToken = null;\n      /**\n       * @internal for testing\n       */\n      this.parseCount = 0;\n    }\n    return _createClass(HttpXsrfCookieExtractor, [{\n      key: \"getToken\",\n      value: function getToken() {\n        if (this.platform === 'server') {\n          return null;\n        }\n        var cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n          this.parseCount++;\n          this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n          this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n      }\n    }]);\n  }();\n  _HttpXsrfCookieExtractor = HttpXsrfCookieExtractor;\n  _HttpXsrfCookieExtractor.ɵfac = function _HttpXsrfCookieExtractor_Factory(t) {\n    return new (t || _HttpXsrfCookieExtractor)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(XSRF_COOKIE_NAME));\n  };\n  _HttpXsrfCookieExtractor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _HttpXsrfCookieExtractor,\n    factory: _HttpXsrfCookieExtractor.ɵfac\n  });\n  return HttpXsrfCookieExtractor;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction xsrfInterceptorFn(req, next) {\n  var lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n  var token = inject(HttpXsrfTokenExtractor).getToken();\n  var headerName = inject(XSRF_HEADER_NAME);\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({\n      headers: req.headers.set(headerName, token)\n    });\n  }\n  return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = /*#__PURE__*/(function () {\n  var _HttpXsrfInterceptor;\n  var HttpXsrfInterceptor = /*#__PURE__*/function () {\n    function HttpXsrfInterceptor(injector) {\n      _classCallCheck(this, HttpXsrfInterceptor);\n      this.injector = injector;\n    }\n    return _createClass(HttpXsrfInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(initialRequest, next) {\n        return runInInjectionContext(this.injector, function () {\n          return xsrfInterceptorFn(initialRequest, function (downstreamRequest) {\n            return next.handle(downstreamRequest);\n          });\n        });\n      }\n    }]);\n  }();\n  _HttpXsrfInterceptor = HttpXsrfInterceptor;\n  _HttpXsrfInterceptor.ɵfac = function _HttpXsrfInterceptor_Factory(t) {\n    return new (t || _HttpXsrfInterceptor)(i0.ɵɵinject(i0.EnvironmentInjector));\n  };\n  _HttpXsrfInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _HttpXsrfInterceptor,\n    factory: _HttpXsrfInterceptor.ɵfac\n  });\n  return HttpXsrfInterceptor;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind = /*#__PURE__*/function (HttpFeatureKind) {\n  HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n  HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n  HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n  HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n  HttpFeatureKind[HttpFeatureKind[\"Fetch\"] = 6] = \"Fetch\";\n  return HttpFeatureKind;\n}(HttpFeatureKind || {});\nfunction makeHttpFeature(kind, providers) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * <div class=\"alert is-helpful\">\n *\n * It's strongly recommended to enable\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for applications that use\n * Server-Side Rendering for better performance and compatibility. To enable `fetch`, add\n * `withFetch()` feature to the `provideHttpClient()` call at the root of the application:\n *\n * ```\n * provideHttpClient(withFetch());\n * ```\n *\n * </div>\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nfunction provideHttpClient() {\n  for (var _len = arguments.length, features = new Array(_len), _key = 0; _key < _len; _key++) {\n    features[_key] = arguments[_key];\n  }\n  if (ngDevMode) {\n    var featureKinds = new Set(features.map(function (f) {\n      return f.ɵkind;\n    }));\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) && featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(ngDevMode ? \"Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.\" : '');\n    }\n  }\n  var providers = [HttpClient, HttpXhrBackend, HttpInterceptorHandler, {\n    provide: HttpHandler,\n    useExisting: HttpInterceptorHandler\n  }, {\n    provide: HttpBackend,\n    useExisting: HttpXhrBackend\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: xsrfInterceptorFn,\n    multi: true\n  }, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }];\n  for (var _i2 = 0, _features = features; _i2 < _features.length; _i2++) {\n    var feature = _features[_i2];\n    providers.push.apply(providers, _toConsumableArray(feature.ɵproviders));\n  }\n  return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(function (interceptorFn) {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true\n    };\n  }));\n}\nvar LEGACY_INTERCEPTOR_FN = /*#__PURE__*/new InjectionToken(ngDevMode ? 'LEGACY_INTERCEPTOR_FN' : '');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nfunction withInterceptorsFromDi() {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [{\n    provide: LEGACY_INTERCEPTOR_FN,\n    useFactory: legacyInterceptorFnFactory\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useExisting: LEGACY_INTERCEPTOR_FN,\n    multi: true\n  }]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withXsrfConfiguration(_ref6) {\n  var cookieName = _ref6.cookieName,\n    headerName = _ref6.headerName;\n  var providers = [];\n  if (cookieName !== undefined) {\n    providers.push({\n      provide: XSRF_COOKIE_NAME,\n      useValue: cookieName\n    });\n  }\n  if (headerName !== undefined) {\n    providers.push({\n      provide: XSRF_HEADER_NAME,\n      useValue: headerName\n    });\n  }\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withNoXsrfProtection() {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [{\n    provide: XSRF_ENABLED,\n    useValue: false\n  }]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nfunction withJsonpSupport() {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: jsonpInterceptorFn,\n    multi: true\n  }]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [{\n    provide: HttpBackend,\n    useFactory: function useFactory() {\n      var handlerFromParent = inject(HttpHandler, {\n        skipSelf: true,\n        optional: true\n      });\n      if (ngDevMode && handlerFromParent === null) {\n        throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n      }\n      return handlerFromParent;\n    }\n  }]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * This `FetchBackend` requires the support of the Fetch API which is available on all evergreen\n * browsers and on NodeJS from v18 onward.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n */\nfunction withFetch() {\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof fetch !== 'function') {\n    // TODO: Create a runtime error\n    // TODO: Use ENVIRONMENT_INITIALIZER to contextualize the error message (browser or server)\n    throw new Error('The `withFetch` feature of HttpClient requires the `fetch` API to be available. ' + 'If you run the code in a Node environment, make sure you use Node v18.10 or later.');\n  }\n  return makeHttpFeature(HttpFeatureKind.Fetch, [FetchBackend, {\n    provide: HttpBackend,\n    useExisting: FetchBackend\n  }, {\n    provide: PRIMARY_HTTP_BACKEND,\n    useExisting: FetchBackend\n  }]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nvar HttpClientXsrfModule = /*#__PURE__*/(function () {\n  var _HttpClientXsrfModule;\n  var HttpClientXsrfModule = /*#__PURE__*/function () {\n    function HttpClientXsrfModule() {\n      _classCallCheck(this, HttpClientXsrfModule);\n    }\n    return _createClass(HttpClientXsrfModule, null, [{\n      key: \"disable\",\n      value:\n      /**\n       * Disable the default XSRF protection.\n       */\n      function disable() {\n        return {\n          ngModule: HttpClientXsrfModule,\n          providers: [withNoXsrfProtection().ɵproviders]\n        };\n      }\n      /**\n       * Configure XSRF protection.\n       * @param options An object that can specify either or both\n       * cookie name or header name.\n       * - Cookie name default is `XSRF-TOKEN`.\n       * - Header name default is `X-XSRF-TOKEN`.\n       *\n       */\n    }, {\n      key: \"withOptions\",\n      value: function withOptions() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n          ngModule: HttpClientXsrfModule,\n          providers: withXsrfConfiguration(options).ɵproviders\n        };\n      }\n    }]);\n  }();\n  _HttpClientXsrfModule = HttpClientXsrfModule;\n  _HttpClientXsrfModule.ɵfac = function _HttpClientXsrfModule_Factory(t) {\n    return new (t || _HttpClientXsrfModule)();\n  };\n  _HttpClientXsrfModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: _HttpClientXsrfModule\n  });\n  _HttpClientXsrfModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [HttpXsrfInterceptor, {\n      provide: HTTP_INTERCEPTORS,\n      useExisting: HttpXsrfInterceptor,\n      multi: true\n    }, {\n      provide: HttpXsrfTokenExtractor,\n      useClass: HttpXsrfCookieExtractor\n    }, withXsrfConfiguration({\n      cookieName: XSRF_DEFAULT_COOKIE_NAME,\n      headerName: XSRF_DEFAULT_HEADER_NAME\n    }).ɵproviders, {\n      provide: XSRF_ENABLED,\n      useValue: true\n    }]\n  });\n  return HttpClientXsrfModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nvar HttpClientModule = /*#__PURE__*/(function () {\n  var _HttpClientModule;\n  var HttpClientModule = /*#__PURE__*/_createClass(function HttpClientModule() {\n    _classCallCheck(this, HttpClientModule);\n  });\n  _HttpClientModule = HttpClientModule;\n  _HttpClientModule.ɵfac = function _HttpClientModule_Factory(t) {\n    return new (t || _HttpClientModule)();\n  };\n  _HttpClientModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: _HttpClientModule\n  });\n  _HttpClientModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [provideHttpClient(withInterceptorsFromDi())]\n  });\n  return HttpClientModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\nvar HttpClientJsonpModule = /*#__PURE__*/(function () {\n  var _HttpClientJsonpModule;\n  var HttpClientJsonpModule = /*#__PURE__*/_createClass(function HttpClientJsonpModule() {\n    _classCallCheck(this, HttpClientJsonpModule);\n  });\n  _HttpClientJsonpModule = HttpClientJsonpModule;\n  _HttpClientJsonpModule.ɵfac = function _HttpClientJsonpModule_Factory(t) {\n    return new (t || _HttpClientJsonpModule)();\n  };\n  _HttpClientJsonpModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: _HttpClientJsonpModule\n  });\n  _HttpClientJsonpModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [withJsonpSupport().ɵproviders]\n  });\n  return HttpClientJsonpModule;\n})();\n/*#__PURE__*/(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Keys within cached response data structure.\n */\nvar BODY = 'b';\nvar HEADERS = 'h';\nvar STATUS = 's';\nvar STATUS_TEXT = 'st';\nvar URL = 'u';\nvar RESPONSE_TYPE = 'rt';\nvar CACHE_OPTIONS = /*#__PURE__*/new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_OPTIONS' : '');\n/**\n * A list of allowed HTTP methods to cache.\n */\nvar ALLOWED_METHODS = ['GET', 'HEAD'];\nfunction transferCacheInterceptorFn(req, next) {\n  var _globalOptions$filter;\n  var _inject3 = inject(CACHE_OPTIONS),\n    isCacheActive = _inject3.isCacheActive,\n    globalOptions = _objectWithoutProperties(_inject3, _excluded);\n  var requestOptions = req.transferCache,\n    requestMethod = req.method;\n  // In the following situations we do not want to cache the request\n  if (!isCacheActive ||\n  // POST requests are allowed either globally or at request level\n  requestMethod === 'POST' && !globalOptions.includePostRequests && !requestOptions || requestMethod !== 'POST' && !ALLOWED_METHODS.includes(requestMethod) || requestOptions === false ||\n  //\n  ((_globalOptions$filter = globalOptions.filter) === null || _globalOptions$filter === void 0 ? void 0 : _globalOptions$filter.call(globalOptions, req)) === false) {\n    return next(req);\n  }\n  var transferState = inject(TransferState);\n  var storeKey = makeCacheKey(req);\n  var response = transferState.get(storeKey, null);\n  var headersToInclude = globalOptions.includeHeaders;\n  if (typeof requestOptions === 'object' && requestOptions.includeHeaders) {\n    // Request-specific config takes precedence over the global config.\n    headersToInclude = requestOptions.includeHeaders;\n  }\n  if (response) {\n    var undecodedBody = response[BODY],\n      responseType = response[RESPONSE_TYPE],\n      httpHeaders = response[HEADERS],\n      status = response[STATUS],\n      statusText = response[STATUS_TEXT],\n      url = response[URL];\n    // Request found in cache. Respond using it.\n    var body = undecodedBody;\n    switch (responseType) {\n      case 'arraybuffer':\n        body = new TextEncoder().encode(undecodedBody).buffer;\n        break;\n      case 'blob':\n        body = new Blob([undecodedBody]);\n        break;\n    }\n    // We want to warn users accessing a header provided from the cache\n    // That HttpTransferCache alters the headers\n    // The warning will be logged a single time by HttpHeaders instance\n    var headers = new HttpHeaders(httpHeaders);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      // Append extra logic in dev mode to produce a warning when a header\n      // that was not transferred to the client is accessed in the code via `get`\n      // and `has` calls.\n      headers = appendMissingHeadersDetection(req.url, headers, headersToInclude !== null && headersToInclude !== void 0 ? headersToInclude : []);\n    }\n    return of(new HttpResponse({\n      body: body,\n      headers: headers,\n      status: status,\n      statusText: statusText,\n      url: url\n    }));\n  }\n  var isServer = isPlatformServer(inject(PLATFORM_ID));\n  // Request not found in cache. Make the request and cache it if on the server.\n  return next(req).pipe(tap(function (event) {\n    if (event instanceof HttpResponse && isServer) {\n      transferState.set(storeKey, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, BODY, event.body), HEADERS, getFilteredHeaders(event.headers, headersToInclude)), STATUS, event.status), STATUS_TEXT, event.statusText), URL, event.url || ''), RESPONSE_TYPE, req.responseType));\n    }\n  }));\n}\nfunction getFilteredHeaders(headers, includeHeaders) {\n  if (!includeHeaders) {\n    return {};\n  }\n  var headersMap = {};\n  var _iterator2 = _createForOfIteratorHelper(includeHeaders),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var key = _step2.value;\n      var values = headers.getAll(key);\n      if (values !== null) {\n        headersMap[key] = values;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return headersMap;\n}\nfunction sortAndConcatParams(params) {\n  return _toConsumableArray(params.keys()).sort().map(function (k) {\n    return \"\".concat(k, \"=\").concat(params.getAll(k));\n  }).join('&');\n}\nfunction makeCacheKey(request) {\n  // make the params encoded same as a url so it's easy to identify\n  var params = request.params,\n    method = request.method,\n    responseType = request.responseType,\n    url = request.url;\n  var encodedParams = sortAndConcatParams(params);\n  var serializedBody = request.serializeBody();\n  if (serializedBody instanceof URLSearchParams) {\n    serializedBody = sortAndConcatParams(serializedBody);\n  } else if (typeof serializedBody !== 'string') {\n    serializedBody = '';\n  }\n  var key = [method, responseType, url, serializedBody, encodedParams].join('|');\n  var hash = generateHash(key);\n  return makeStateKey(hash);\n}\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value) {\n  var hash = 0;\n  var _iterator3 = _createForOfIteratorHelper(value),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _char = _step3.value;\n      hash = Math.imul(31, hash) + _char.charCodeAt(0) << 0;\n    }\n    // Force positive number hash.\n    // 2147483647 = equivalent of Integer.MAX_VALUE.\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  hash += 2147483647 + 1;\n  return hash.toString();\n}\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nfunction withHttpTransferCache(cacheOptions) {\n  return [{\n    provide: CACHE_OPTIONS,\n    useFactory: function useFactory() {\n      ɵperformanceMarkFeature('NgHttpTransferCache');\n      return _objectSpread({\n        isCacheActive: true\n      }, cacheOptions);\n    }\n  }, {\n    provide: HTTP_ROOT_INTERCEPTOR_FNS,\n    useValue: transferCacheInterceptorFn,\n    multi: true,\n    deps: [TransferState, CACHE_OPTIONS]\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useFactory: function useFactory() {\n      var appRef = inject(ApplicationRef);\n      var cacheState = inject(CACHE_OPTIONS);\n      return function () {\n        ɵwhenStable(appRef).then(function () {\n          cacheState.isCacheActive = false;\n        });\n      };\n    }\n  }];\n}\n/**\n * This function will add a proxy to an HttpHeader to intercept calls to get/has\n * and log a warning if the header entry requested has been removed\n */\nfunction appendMissingHeadersDetection(url, headers, headersToInclude) {\n  var warningProduced = new Set();\n  return new Proxy(headers, {\n    get: function get(target, prop) {\n      var value = Reflect.get(target, prop);\n      var methods = new Set(['get', 'has', 'getAll']);\n      if (typeof value !== 'function' || !methods.has(prop)) {\n        return value;\n      }\n      return function (headerName) {\n        // We log when the key has been removed and a warning hasn't been produced for the header\n        var key = (prop + ':' + headerName).toLowerCase(); // e.g. `get:cache-control`\n        if (!headersToInclude.includes(headerName) && !warningProduced.has(key)) {\n          warningProduced.add(key);\n          var truncatedUrl = ɵtruncateMiddle(url);\n          // TODO: create Error guide for this warning\n          console.warn(ɵformatRuntimeError(2802 /* RuntimeErrorCode.HEADERS_ALTERED_BY_TRANSFER_CACHE */, \"Angular detected that the `\".concat(headerName, \"` header is accessed, but the value of the header \") + \"was not transferred from the server to the client by the HttpTransferCache. \" + \"To include the value of the `\".concat(headerName, \"` header for the `\").concat(truncatedUrl, \"` request, \") + \"use the `includeHeaders` list. The `includeHeaders` can be defined either \" + \"on a request level by adding the `transferCache` parameter, or on an application \" + \"level by adding the `httpCacheTransfer.includeHeaders` argument to the \" + \"`provideClientHydration()` call. \"));\n        }\n        // invoking the original method\n        return value.apply(target, [headerName]);\n      };\n    }\n  });\n}\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FetchBackend, HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpStatusCode, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HTTP_ROOT_INTERCEPTOR_FNS as ɵHTTP_ROOT_INTERCEPTOR_FNS, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler, PRIMARY_HTTP_BACKEND as ɵPRIMARY_HTTP_BACKEND, withHttpTransferCache as ɵwithHttpTransferCache };\n//# sourceMappingURL=http.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}